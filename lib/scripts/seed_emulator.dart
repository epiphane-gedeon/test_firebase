import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import '../features/auth/data/models/user_model.dart';

class EmulatorSeeder {
  final FirebaseFirestore firestore;
  final FirebaseAuth auth;

  EmulatorSeeder({required this.firestore, required this.auth});

  Future<void> seed() async {
    debugPrint('üå± D√©but du seed des donn√©es de test...');

    try {
      // Cr√©er les utilisateurs de test
      await _createTestUsers();

      debugPrint('‚úÖ Seed termin√© avec succ√®s !');
    } catch (e) {
      debugPrint('‚ùå Erreur lors du seed: $e');
    }
  }

  Future<void> _createTestUsers() async {
    final users = [
      {
        'email': 'admin@school.com',
        'password': 'password123',
        'displayName': 'Admin Principal',
        'role': UserRole.admin,
      },
      {
        'email': 'teacher@school.com',
        'password': 'password123',
        'displayName': 'Professeur Dupont',
        'role': UserRole.teacher,
      },
      {
        'email': 'student@school.com',
        'password': 'password123',
        'displayName': '√âl√®ve Martin',
        'role': UserRole.student,
      },
    ];

    for (final userData in users) {
      try {
        // Cr√©er l'utilisateur Firebase Auth
        final userCredential = await auth.createUserWithEmailAndPassword(
          email: userData['email'] as String,
          password: userData['password'] as String,
        );

        // Cr√©er le document utilisateur dans Firestore
        final user = UserModel(
          uid: userCredential.user!.uid,
          email: userData['email'] as String,
          displayName: userData['displayName'] as String,
          role: userData['role'] as UserRole,
          createdAt: DateTime.now(),
          isEmailVerified: true,
        );

        await firestore.collection('users').doc(user.uid).set(user.toMap());

        debugPrint('‚úÖ Utilisateur cr√©√©: ${user.email}');
      } on FirebaseAuthException catch (e) {
        if (e.code == 'email-already-in-use') {
          debugPrint('‚ÑπÔ∏è Utilisateur d√©j√† existant: ${userData['email']}');
        } else {
          debugPrint('‚ùå Erreur cr√©ation utilisateur ${userData['email']}: $e');
        }
      }
    }
  }
}
